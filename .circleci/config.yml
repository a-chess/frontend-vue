version: 2
jobs:
  build:
    working_directory: ~/a-chess/frontend-vue
    parallelism: 1
    shell: /bin/bash --login
    docker:
      - image: circleci/ruby:2.5.1-node-browsers
        environment:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_USERNAME: hyuga
          POSTGRES_PASSWORD:

      - image: circleci/postgres:10-alpine-postgis
        environment:
          POSTGRES_USER: hyuga
          POSTGRES_DB: frontend_test

    steps:
      - checkout

      # Restore bundle cache
      - restore_cache:
        keys:
          - rails-demo-{{ checksum "Gemfile.lock" }}
          - rails-demo-
      
      # Bundle install dependencies
      - run:
          name: Install dependencies
          command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs 4 --retry 3

      - run: sudo apt install -y postgresql-client || true

      # Store bundle cache
      - save_cache:
          key: rails-demo-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      
      - run: bundle exec rubocop

      # Setup the database
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # Run the rspec
      - run: bundle exec rake rspec --color --fail-fast


    # - run: if [ -z "${NODE_ENV:-}" ]; then export NODE_ENV=test; fi
    # - run: export PATH="~/a-chess/frontend-vue/node_modules/.bin:$PATH"
    # - run: npm install
    # - run: echo -e "export RAILS_ENV=test\nexport RACK_ENV=test" >> $BASH_ENV
    # - run: 'bundle check --path=vendor/bundle || bundle install --path=vendor/bundle
    #     --jobs=4 --retry=3 '
    # # Save dependency cache
    # - save_cache:
    #     key: v1-dep-{{ .Branch }}-{{ epoch }}
    #     paths:
    #     # This is a broad list of cache paths to include many possible development environments
    #     # You can probably delete some of these entries
    #     - vendor/bundle
    #     - ~/virtualenvs
    #     - ~/.m2
    #     - ~/.ivy2
    #     - ~/.bundle
    #     - ~/.go_workspace
    #     - ~/.gradle
    #     - ~/.cache/bower
    #     - ./node_modules
    # # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    # - run: |-
    #     mkdir -p config && echo 'test:
    #       database: circle_ruby_test
    #       adapter: postgresql
    #       timeout: 5000
    #       username: ubuntu
    #       pool: <%= (ENV['DB_CONNECTION_POOL_SIZE'] || "5").to_i %>
    #       encoding: unicode
    #       host: localhost
    #     ' > config/database.yml
    # - run:
    #     command: bundle exec rake db:create --trace
    #     environment:
    #       RAILS_ENV: test
    #       RACK_ENV: test
    # # Test
    # #   This would typically be a build job when using workflows, possibly combined with build
    # # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    # - run:
    #     command: bundle exec rspec --require spec_helper --format progress spec
    #     environment:
    #       RAILS_ENV: test
    #       RACK_ENV: test
    # # Teardown
    # #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # # Save test results
    # - store_test_results:
    #     path: /tmp/circleci-test-results
    # # Save artifacts
    # - store_artifacts:
    #     path: /tmp/circleci-artifacts
    # - store_artifacts:
    #     path: /tmp/circleci-test-results
